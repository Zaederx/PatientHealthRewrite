import java.util.concurrent.TimeUnit;

plugins {
	id 'org.springframework.boot' version '2.5.4'
	id 'io.spring.dependency-management' version '1.0.11.RELEASE'
	id 'java'
}

group = 'com.App'
version = '0.0.1-SNAPSHOT'
// sourceCompatibility = '11' // use tool chain instead 
//tool chain provides the needed version of java instead of just indicating which version
java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(11)
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation group: 'org.springframework', name: 'spring-webmvc', version: '5.3.9'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-amqp'
	implementation 'org.springframework.boot:spring-boot-starter-mail'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
	implementation 'org.thymeleaf.extras:thymeleaf-extras-springsecurity5'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	runtimeOnly 'com.h2database:h2'
	runtimeOnly 'mysql:mysql-connector-java'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.0-RC1'
	testImplementation group: 'junit', name: 'junit', version: '4.13.2'
	testImplementation 'org.springframework.amqp:spring-rabbit-test'
	testImplementation 'org.springframework.security:spring-security-test'
}

test {
	useJUnitPlatform()
	//show tests info in standard output
	testLogging.showStandardStreams = true
	//show testLogging
	testLogging {
		events "passed", "skipped", "failed"
	}
	ignoreFailures = true
	//allows up to three test classes to run simultaneously - faster
	maxParallelForks = 3
}


task installNodeDependencies() {
	println "\u001B[32m"+"compiling typescript"
	ext.process = new ProcessBuilder()
	.directory(projectDir)
	.command("npm", "install")
	.start();

	ext.process.waitFor(5,TimeUnit.SECONDS);//wait for command to be executed
	ext.process.destroy();
	ext.process.waitFor(5,TimeUnit.SECONDS);//wait for destory to happen
	ext.process.destroyForcibly();//if stuck then kill process 
	ext.process.waitFor();//wait for kill Process to happen
	
	
	// ext.output = { //for access to external output if needed
	// 	return "\u001B[32m"+standardOutput.toString();
	// }
	timeout = Duration.ofMinutes(1)
	doLast {
		println "\u001B[32m"+"compileSass done!"
	}
}


/**
* Calls npm to compile scss file into css
*/
task compileSass() {
	println "\u001B[32m"+"compiling sass"
	ext.process = new ProcessBuilder()
            .directory(projectDir)
            .command("npm", "run", "sass")
            .start();
	
	ext.process.waitFor(5,TimeUnit.SECONDS);//wait for command to be executed
	ext.process.destroy();
	ext.process.waitFor(5,TimeUnit.SECONDS);//wait for destory to happen
	ext.process.destroyForcibly();//if stuck then kill process 
	ext.process.waitFor();//wait for kill Process to happen
	
	
	// ext.output = { //for access to external output if needed
	// 	return "\u001B[32m"+standardOutput.toString();
	// }
	timeout = Duration.ofMinutes(1)
	doLast {
		println "\u001B[32m"+"compileSass done!"
	}
}


//Calls npm to compile ts files into js files
task compileTS() {
	println "\u001B[32m"+"compiling typescript"
	ext.process = new ProcessBuilder()
            .directory(projectDir)
            .command("npm", "run", "tsc")
            .start();
	

	ext.process.waitFor(5,TimeUnit.SECONDS);
	ext.process.destroy();
	ext.process.waitFor(5,TimeUnit.SECONDS);
	ext.process.destroyForcibly();
	ext.process.waitFor();

	
	// ext.output = { //for access to external output if needed
	// 	return "\u001B[32m"+standardOutput.toString();
	// }
	timeout = Duration.ofMinutes(1)
	doLast { 
		println "\u001B[32m"+"compileTS done!"
	}
}


/* Extends build to have compileSass and compileTS run before it
whenever build or bootRun is called
 */

build.dependsOn installNodeDependencies, compileSass, compileTS